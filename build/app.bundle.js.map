{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./AirPollMain.js","webpack:///./ButtonEventHandler.js","webpack:///./DataVisualisationController.js","webpack:///./FirebaseCredentials.js"],"names":["allDataPoints","dataPointMarkers","dataPointCircles","dataGrid","showDataPoints","showDataCircles","showDataGrid","heatmap","initApp","config","firebase","initializeApp","dataPointsDbRef","firestore","collection","map","initMap","initHeatmap","addDataPointDbListener","window","google","maps","Map","document","getElementById","center","lat","lng","zoom","styles","featureType","stylers","visibility","disableDoubleClickZoom","streetViewControl","visualization","HeatmapLayer","radius","dissipating","addMapClickListener","addListener","mapLayer","dataPoint","latlng","latLng","toJSON","value","Math","floor","random","toString","date","Date","toUTCString","push","addNewDataPointClickToDb","add","then","docRef","console","log","id","catch","error","get","dataPoints","forEach","data","showDensityHeatmap","showDataGridVal","showDataCirclesVal","showDataPointsVal","showDensityHeatmapVal","initButtonEventHandler","showDataGridM","showDataCirclesM","showDataPointsM","showDensityHeatmapM","addFormButtonListeners","showGridButton","showPointsButton","showCirclesButton","showHeatmapButton","innerText","onclick","styleButton","classList","remove","button","highlight","showDataPointMarkers","showDataCircleMarkers","showDataGridOverlay","initDVController","mapObject","show","dataPointCircle","setVisible","dataPointMarker","setMap","addMarkerToMap","getData","LatLng","hue","colorString","marker","Marker","position","label","visible","icon","path","SymbolPath","CIRCLE","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","scale","toDateString","toTimeString","split","drawCircle","opacity","Circle","firebaseCredentials","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId"],"mappings":"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DAAepD,GAAf,EAAoB2B,UAAUyB,IAAV,EAApB;AACD,KAHD;AAID,GALD;;AAOA;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;;;;;;;;;;;;;;;;;AC5RA,IAAI7D,qBAAJ;AACA,IAAID,wBAAJ;AACA,IAAID,uBAAJ;AACA,IAAIgE,2BAAJ;;AAGA,IAAIC,wBAAJ;AACA,IAAIC,2BAAJ;AACA,IAAIC,0BAAJ;AACA,IAAIC,8BA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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./AirPollMain.js\");\n","import { firebaseCredentials } from './FirebaseCredentials';\n// import { addFormButtonListeners } from './ButtonEventHandler';\nimport { addMarkerToMap, initDVController } from './DataVisualisationController';\n\nlet allDataPoints = [];\nlet dataPointMarkers = [];\nlet dataPointCircles = [];\nlet dataGrid = [];\n\nlet showDataPoints = true;\nlet showDataCircles = false;\nlet showDataGrid = false;\nlet heatmap;\n\n\n/**\n * Creates a map object with a click listener and a heatmap.\n */\nfunction initApp() {\n  const config = firebaseCredentials(); //Firebase API keys\n  firebase.initializeApp(config);\n  const dataPointsDbRef = firebase.firestore().collection('datapoints');\n\n  const map = initMap();\n  heatmap = initHeatmap(map);\n\n  // addMapClickListener(map, dataPointsDbRef);\n  addDataPointDbListener(dataPointsDbRef, map);\n  // addFormButtonListeners(map);\n  initDVController(map);\n\n}\n\nwindow.initApp = initApp;\n\nfunction initMap() {\n  return new google.maps.Map(document.getElementById('map'), {\n    center: {lat: 50.9365, lng: -1.396},\n    zoom: 16,\n    //hide points of interest and public transport\n    styles: [{\n      featureType: 'poi',\n      stylers: [{visibility: 'off'}],\n    }, {\n      featureType: 'transit.station',\n      stylers: [{visibility: 'off'}],\n    }],\n    disableDoubleClickZoom: true,\n    streetViewControl: false,\n  });\n}\n\nfunction initHeatmap() {\n  return new google.maps.visualization.HeatmapLayer({radius: 0.005, dissipating: false});\n}\n\nfunction addMapClickListener(map, dataPointsDbRef) {\n  map.addListener('click', function (mapLayer) {\n\n    const dataPoint = {\n      latlng: mapLayer.latLng.toJSON(),\n      value: Math.floor((Math.random() * 100)).toString(),\n      date: new Date().toUTCString(),\n    };\n    allDataPoints.push(dataPoint);\n\n    addNewDataPointClickToDb(dataPointsDbRef, dataPoint);\n    addMarkerToMap(map, dataPoint);\n  });\n}\n\nfunction addNewDataPointClickToDb(dataPointsDbRef, dataPoint) {\n  dataPointsDbRef.add(dataPoint).then(function (docRef) {\n    console.log('Document written with ID: ', docRef.id);\n  }).catch(function (error) {\n    console.error('Error adding document: ', error);\n  });\n}\n\nfunction addDataPointDbListener(dataPointsDbRef, map) {\n  dataPointsDbRef.get().then(function (dataPoints) {\n    dataPoints.forEach(function (dataPoint) {\n      allDataPoints.push(dataPoint.data());\n      addMarkerToMap(map, dataPoint.data());\n    });\n  });\n\n  //TODO: get datapoints as they are added to database\n}\n\n// function hideDataGrid(hidden) {\n//   dataGrid.forEach(function (rectangle) {\n//     rectangle.setVisible(!hidden);\n//   });\n// }\n//\n// function displayGrid(map) {\n//   dataGrid = [];\n//\n//   //Step1: find biggest square (in pixels) on map\n//   let bounds = map.getBounds();\n//   let projection = map.getProjection();\n//\n//   let ne = projection.fromLatLngToPoint(bounds.getNorthEast());\n//   let sw = projection.fromLatLngToPoint(bounds.getSouthWest());\n//\n//   let scale = Math.pow(2, map.getZoom());\n//\n//   let widthPixels = (ne.x - sw.x) * scale;\n//   let heightPixels = (sw.y - ne.y) * scale;\n//\n//   let totalSquareLengthPixels = Math.min(widthPixels, heightPixels);\n//\n//   //Step 2: find grid size in pixels\n//   let gridLengthPixels = Math.round(totalSquareLengthPixels / 20); //Eventually changeable by slider\n//\n//\n//   //Step 3: Create grid data structure\n//   let xOffsetOffScreen = gridLengthPixels + (0.5 * (widthPixels % gridLengthPixels));\n//   let yOffsetOffScreen = gridLengthPixels + (0.5 * (heightPixels % gridLengthPixels));\n//\n//   let gridsAmountX = 3 + Math.round(widthPixels / gridLengthPixels);\n//   let gridsAmountY = 3 + Math.round(heightPixels / gridLengthPixels); //todo recalculate\n//\n//\n//   //Using Pixels for grids because converting each grid coordinate to latlng and comparing each data point to a\n//   //list of lats and lngs takes much longer than finding pixel coordinate of datapoint! (then grid is easy to find)\n//\n//   let gridsXPixels = [];\n//   let xPixels;\n//   for (xPixels = -xOffsetOffScreen; xPixels < widthPixels + gridLengthPixels; xPixels += gridLengthPixels) {\n//     gridsXPixels.push(Math.round(xPixels));\n//   }\n//   let maxX = xPixels + gridLengthPixels;\n//\n//   let gridsYPixels = [];\n//   let yPixels;\n//   for (yPixels = -yOffsetOffScreen; yPixels < heightPixels + gridLengthPixels; yPixels += gridLengthPixels) {\n//     gridsYPixels.push(Math.round(yPixels));\n//   }\n//   let maxY = yPixels + gridLengthPixels;\n//\n//   //3D array! [X Position][Y Position][List of data in grid]\n//   let gridDataCollection = [];\n//   for (let gridX = 0; gridX < gridsAmountX + 1; gridX++) {\n//     gridDataCollection[gridX] = [];\n//     for (let gridY = 0; gridY < gridsAmountY + 1; gridY++) {\n//       gridDataCollection[gridX][gridY] = [];\n//     }\n//   }\n//\n//   allDataPoints.forEach(function (dataPoint) {\n//     let latlng = new google.maps.LatLng(dataPoint.latlng.lat, dataPoint.latlng.lng);\n//     let pixelPoint = projection.fromLatLngToPoint(latlng);\n//     let pixelX = Math.round((pixelPoint.x - sw.x) * scale);\n//     let pixelY = Math.round((pixelPoint.y - ne.y) * scale);\n//\n//     if (pixelX >= -xOffsetOffScreen && pixelX < maxX\n//       && pixelY >= -yOffsetOffScreen && pixelY < maxY) {\n//       let gridX = ((pixelX + xOffsetOffScreen) / gridLengthPixels);\n//       let gridY = ((pixelY + yOffsetOffScreen) / gridLengthPixels);\n//       gridDataCollection[(Math.floor(gridX))][Math.floor(gridY)].push(dataPoint.value);\n//     }\n//   });\n//\n//   let maxGridValue = 0;\n//   let minGridValue = 100;\n//   let sumOfGridValues = 0;\n//   let totalGridValues = 0; //number of non-empty grids to calculate average grid value\n//\n//\n//   let gridIndexToLatLngBounds = [];\n//\n//   for (let gridX = 0; gridX < gridsXPixels.length + 1; gridX++) {\n//     gridIndexToLatLngBounds[gridX] = [];\n//     for (let gridY = 0; gridY < gridsYPixels.length + 1; gridY++) {\n//       let gridBounds = pointToLatLng(projection, gridsXPixels[gridX], gridsYPixels[gridY], sw.x, ne.y, scale, gridLengthPixels);\n//       gridIndexToLatLngBounds[gridX][gridY] = gridBounds;\n//\n//       let values = gridDataCollection[gridX][gridY];\n//\n//       let count = values.length;\n//       if (count === 0) {\n//         gridDataCollection[gridX][gridY] = null;\n//       } else {\n//         let total = 0;\n//         for (let index = 0; index < count; index++) {\n//           total += parseInt(gridDataCollection[gridX][gridY][index]);\n//         }\n//         let avg = (total / count).toFixed(2);\n//         gridDataCollection[gridX][gridY] = avg;\n//\n//         if (avg > maxGridValue) {\n//           maxGridValue = avg;\n//         }\n//         if (avg < minGridValue) {\n//           maxGridValue = avg;\n//         }\n//         sumOfGridValues += parseFloat(avg);\n//         totalGridValues++;\n//       }\n//     }\n//   }\n//\n//   // console.log(gridDataCollection);\n//\n//   /*for (gridX=0; gridX< gridsXPixels.length + 1; gridX++) {\n//     for (gridY=0; gridY< gridsYPixels.length + 1; gridY++) {\n//       drawRectangle(map, gridIndexToLatLngBounds[gridX][gridY], gridDataCollection[gridX][gridY]);\n//     }\n//   }*/\n//\n//   let gridBlendedDataCollection = blendGrid(gridDataCollection);\n//\n//   console.log(gridBlendedDataCollection);\n//   for (let gridX = 0; gridX < gridsXPixels.length - 1; gridX++) {\n//     for (let gridY = 0; gridY < gridsYPixels.length - 1; gridY++) {\n//       drawRectangle(map, gridIndexToLatLngBounds[gridX + 1][gridY + 1], gridBlendedDataCollection[gridX][gridY]);\n//     }\n//   }\n// }\n//\n// function blendGrid(gridDataCollection) {\n//   let gridBlendedDataCollection = [];\n//   for (let gridX = 1; gridX < gridDataCollection.length - 1; gridX++) {\n//     gridBlendedDataCollection[gridX - 1] = [];\n//     for (let gridY = 1; gridY < gridDataCollection[gridX].length - 1; gridY++) {\n//       let total = 0; // total values for grid of 3 x 3\n//       let count = 0;\n//\n//\n//       for (let xIndex = gridX - 1; xIndex <= gridX + 1; xIndex++) {\n//         for (let yIndex = gridY - 1; yIndex <= gridY + 1; yIndex++) {\n//           let val = gridDataCollection[xIndex][yIndex];\n//           if (val != null) {\n//             count += parseInt(1);\n//             total += parseFloat(val);\n//           }\n//         }\n//       }\n//\n//       let dontShowGrid = ((count < 3) && (gridDataCollection[gridX][gridY] == null));\n//       if (dontShowGrid) {\n//         gridBlendedDataCollection[gridX - 1][gridY - 1] = null;\n//       } else {\n//         let avg = total / count;\n//         gridBlendedDataCollection[gridX - 1][gridY - 1] = avg;\n//       }\n//     }\n//   }\n//\n//   return gridBlendedDataCollection;\n// }\n//\n// function blendOperation(gridValues, x, y, count, total) {\n//   let val = gridValues[x][y];\n//   if (!isNaN(val)) {\n//     count += parseInt(1);\n//     total += parseInt(val);\n//   }\n// }\n//\n// function pointToLatLng(projection, x, y, startX, startY, scale, gridLength) {\n//   let nePoint = new google.maps.Point((x / scale) + startX, (y / scale) + startY);\n//   let ne = projection.fromPointToLatLng(nePoint);\n//   let swPoint = new google.maps.Point(((x + gridLength) / scale) + startX, ((y + gridLength) / scale) + startY);\n//   let sw = projection.fromPointToLatLng(swPoint);\n//\n//   let bounds = new google.maps.LatLngBounds(ne, sw);\n//   return bounds;\n// }\n//\n// function drawRectangle(map, bounds, value) {\n//   if (value != null) {\n//     let hue = (100 - value) * 0.6;\n//     let colorString = 'hsl(' + hue + ', 100%, 50%)';\n//     dataGrid.push(new google.maps.Rectangle({\n//       strokeWeight: 0,\n//       fillColor: colorString,\n//       fillOpacity: 0.7,\n//       map: map,\n//       bounds: bounds,\n//     }));\n//   }\n// }","let showDataGrid;\nlet showDataCircles;\nlet showDataPoints;\nlet showDensityHeatmap;\n\n\nlet showDataGridVal;\nlet showDataCirclesVal;\nlet showDataPointsVal;\nlet showDensityHeatmapVal;\n\nfunction initButtonEventHandler(showDataGridM, showDataCirclesM, showDataPointsM, showDensityHeatmapM) {\n  showDataGrid = showDataGridM;\n  showDataCircles = showDataCirclesM;\n  showDataPoints = showDataPointsM;\n  showDensityHeatmap = showDensityHeatmapM;\n\n  addFormButtonListeners();\n}\n\n\nfunction addFormButtonListeners() {\n\n  const showGridButton = document.getElementById('showGrid');\n  const showPointsButton = document.getElementById('showPoints');\n  const showCirclesButton = document.getElementById('showCircles');\n  const showHeatmapButton = document.getElementById('showHeatmap');\n\n  showDataGridVal = !(showGridButton.innerText === 'Show Data Grid');\n  showDataPointsVal = !(showPointsButton.innerText === 'Show Data Points');\n  showDataCirclesVal = !(showCirclesButton.innerText === 'Show Data Circles');\n  showDensityHeatmapVal = !(showHeatmapButton.innerText === 'Show Heatmap');\n\n  showGridButton.onclick = function () {\n    styleButton(showGridButton, !showDataGridVal);\n    showGridButton.innerText = showDataGridVal ? 'Show Data Grid' : 'Hide Data Grid';\n    showDataGridVal =! showDataGridVal;\n    showDataGrid(showDataGridVal);\n  };\n\n  showPointsButton.onclick = function () {\n    if (showDataPointsVal) {\n      showPointsButton.innerText = 'Show Data Points';\n      showPointsButton.classList.remove('btn-primary');\n      showPointsButton.classList.add('btn-outline-primary');\n    } else {\n      showPointsButton.innerText = 'Hide Data Points';\n      showPointsButton.classList.remove('btn-outline-primary');\n      showPointsButton.classList.add('btn-primary');\n    }\n    showDataPointsVal =! showDataPointsVal;\n    showDataPoints(showDataPointsVal);\n  };\n\n  showCirclesButton.onclick = function () {\n    styleButton(showCirclesButton, !showDataCirclesVal);\n    showCirclesButton.innerText = showDataCirclesVal ? 'Show Data Circles' : 'Hide Data Circles';\n    showDataCirclesVal =! showDataCirclesVal;\n    showDataCircles(showDataCirclesVal);\n  };\n\n  showHeatmapButton.onclick = function () {\n    if (showDensityHeatmapVal) {\n      showHeatmapButton.innerText = 'Show Heatmap';\n      showHeatmapButton.classList.remove('btn-primary');\n      showHeatmapButton.classList.add('btn-outline-primary');\n    } else {\n      showHeatmapButton.innerText = 'Hide Heatmap';\n      showHeatmapButton.classList.remove('btn-outline-primary');\n      showHeatmapButton.classList.add('btn-primary');\n    }\n    showDensityHeatmapVal = ! showDensityHeatmapVal;\n    showDensityHeatmap(showDensityHeatmapVal);\n  };\n}\n\nfunction styleButton(button, highlight) {\n  if (highlight) {\n    button.classList.remove('btn-outline-primary');\n    button.classList.add('btn-primary');\n  } else {\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-outline-primary');\n  }\n}\n\nexport {\n  initButtonEventHandler,\n};","import { initButtonEventHandler } from './ButtonEventHandler';\n\nlet map;\nlet dataPoints;\n\nlet allDataPoints = [];\nlet dataPointMarkers = [];\nlet dataPointCircles = [];\nlet dataGrid = [];\n\nlet showDataPointMarkers = true;\nlet showDataCircleMarkers = false;\nlet showDataGridOverlay = false;\nlet heatmap;\n\nfunction initDVController(mapObject) {\n  map = mapObject;\n  heatmap = new google.maps.visualization.HeatmapLayer({radius: 0.005, dissipating: false});\n  initButtonEventHandler(showDataGrid, showDataCircles, showDataPoints, showDensityHeatmap);\n}\n\nfunction showDataGrid(show) {\n  // dataGrid.forEach(function (rectangle) {\n  //   rectangle.setVisible(show);\n  // });\n}\n\nfunction showDataCircles(show) {\n  dataPointCircles.forEach(function (dataPointCircle) {\n    dataPointCircle.setVisible(show);\n  });\n}\n\nfunction showDataPoints(show) {\n  showDataPoints = show;\n  dataPointMarkers.forEach(function (dataPointMarker) {\n    dataPointMarker.setVisible(show);\n  });\n}\n\nfunction showDensityHeatmap(show) {\n  heatmap.setMap(show ? map : null);\n}\n\nfunction addMarkerToMap(map, dataPoint) {\n  const latlng = dataPoint.latlng;\n  heatmap.getData().push(new google.maps.LatLng(latlng.lat, latlng.lng));\n  const hue = (100 - dataPoint.value) * 0.6;\n  const colorString = 'hsl(' + hue + ', 100%, 50%)';\n  const marker = new google.maps.Marker({\n    position: latlng,\n    label: dataPoint.value.toString(),\n    map: map,\n    visible: showDataPointMarkers,\n    icon: {\n      path: google.maps.SymbolPath.CIRCLE,\n      strokeColor: colorString,\n      strokeOpacity: 0,\n      strokeWeight: 1,\n      fillColor: colorString,\n      fillOpacity: 0,\n      scale: 10,\n    },\n  });\n\n  dataPointMarkers.push(marker);\n\n  marker.addListener('click', function () {\n    const date = new Date(dataPoint.date);\n    document.getElementById('date').value = date.toDateString();\n    document.getElementById('time').value = date.toTimeString().split(' ')[0];\n    document.getElementById('value').value = dataPoint.value;\n  });\n\n  // drawCircle(latlng, map, colorString, 0.5, 50);\n  // drawCircle(latlng, map, colorString, 0.3, 100);\n  drawCircle(latlng, map, colorString, 0.1, 200);\n}\n\nfunction drawCircle(latlng, map, colorString, opacity, radius) {\n  dataPointCircles.push(\n    new google.maps.Circle({\n      strokeOpacity: 0,\n      fillColor: colorString,\n      fillOpacity: opacity,\n      map: map,\n      center: latlng,\n      radius: radius,\n      visible: showDataCircleMarkers,\n    }),\n  );\n}\n\nexport {\n  initDVController,\n  addMarkerToMap,\n}","export function firebaseCredentials() {\n  return {\n    apiKey: \"AIzaSyCTY-5_e4vfG_hURD10OVQ-wOkkiBQpZlI\",\n    authDomain: \"airpoll-830fa.firebaseapp.com\",\n    databaseURL: \"https://airpoll-830fa.firebaseio.com\",\n    projectId: \"airpoll-830fa\",\n    storageBucket: \"airpoll-830fa.appspot.com\",\n    messagingSenderId: \"512203516382\"\n  };\n}"],"sourceRoot":""}